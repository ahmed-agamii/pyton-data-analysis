--select EmployeeID, JobTitle, Salary
--from SQL_tutorial.dbo.EmployeeSalary
--union 
--select EmployeeID, FirstName, Age from SQL_tutorial.dbo.WareHouseEmployeeDemographics
--order by EmployeeID






--select * from SQL_tutorial.dbo.EmployeeDemoGraphics
--Full outer join SQL_tutorial.dbo.WareHouseEmployeeDemographics
--on EmployeeDemoGraphics.EmployeeID = WareHouseEmployeeDemographics.EmployeeID

--select FirstName, Lastname, Age, 
--case 
--when Age > 30 then 'old'
--when Age between 27 and 30 then 'young'
--else 'baby'
--end
--from SQL_tutorial.dbo.EmployeeDemographics
--where Age is not null
--order by Age

--select JobTitle, AVG(Salary)

--from SQL_tutorial.dbo.EmployeeDemographics
--join SQL_tutorial.dbo.EmployeeSalary
--on EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID
--group by JobTitle
--having AVG(Salary) > 45000
--order by AVG(Salary)

--select *
--from SQL_tutorial.dbo.EmployeeDemographics 
--update SQL_tutorial.dbo.EmployeeDemoGraphics
--set Age=31 , Gender = 'Female'
--where FirstName = 'Holly' and Lastname = 'Flax'


--select FirstName, Lastname, Gender, Salary
--, COUNT(Gender) over (partition by Gender) as TotalGender
--from SQL_tutorial.dbo.EmployeeDemoGraphics as demo
--join SQL_tutorial.dbo.EmployeeSalary as sal
--on demo.EmployeeID= sal.EmployeeID


--select  Gender,  COUNT(Gender) 
--from SQL_tutorial.dbo.EmployeeDemoGraphics as demo
--join SQL_tutorial.dbo.EmployeeSalary as sal
--on demo.EmployeeID= sal.EmployeeID
--group by  Gender

--with cte_employee as 
--(select FirstName, Lastname, Gender, Salary
--, COUNT(Gender) over (partition by Gender) as TotalGender
--, AVG(Salary) over (partition by Salary) as AvgSalary
--from SQL_tutorial.dbo.EmployeeDemoGraphics as demo
--join SQL_tutorial.dbo.EmployeeSalary as sal
--on demo.EmployeeID= sal.EmployeeID
--where Salary>45000)
--select * from cte_employee



--DELETE FROM #temp_employee WHERE EmployeeID ='1001';



--Create table #temp_employee (
--EmployeeID int,
--JobTitle varchar(100),
--Salary int
--)

--Select * From #temp_employee
--Insert into #temp_employee values (
--'1001', 'HR', '45000'
--)

--Insert into #temp_employee 
--SELECT * From SQL_tutorial.dbo.EmployeeSalary

--Select * From #temp_employee






--drop table if exists #temp_employee2
--Create table #temp_employee2 (
--JobTitle varchar(100),
--EmployeesPerJob int ,
--AvgAge int,
--AvgSalary int
--)


--Insert into #temp_employee2
--SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
--FROM SQL_tutorial..EmployeeDemoGraphics emp
--JOIN SQL_tutorial..EmployeeSalary sal
--	ON emp.EmployeeID = sal.EmployeeID
--group by JobTitle

--select * from #temp_employee2


--Drop Table EmployeeErrors;


--CREATE TABLE EmployeeErrors (
--EmployeeID varchar(50)
--,FirstName varchar(50)
--,LastName varchar(50)
--)

--Insert into EmployeeErrors Values 
--('1001  ', 'Jimbo', 'Halbert')
--,('  1002', 'Pamela', 'Beasely')
--,('1005', 'TOby', 'Flenderson - Fired')

--Select * From EmployeeErrors




--using trim, ltrim, rtrim

--select EmployeeID, trim(EmployeeID) as IDTRIM
--from EmployeeErrors

--select EmployeeID, rtrim(EmployeeID) as IDTRIM
--from EmployeeErrors

--select EmployeeID, ltrim(EmployeeID) as IDTRIM
--from EmployeeErrors


--Using replace



--select LastName, REPLACE(LastName, '- Fired','') as LastNameFixed from EmployeeErrors



--Using substring


--select SUBSTRING(err.FirstName,1,3), SUBSTRING(dem.FirstName,1,3), Substring(err.LastName,1,3), Substring(dem.LastName,1,3)
--from EmployeeErrors err
--join SQL_tutorial.dbo.EmployeeDemoGraphics dem
--on SUBSTRING(err.FirstName,1,3) = SUBSTRING(dem.FirstName,1,3)

--select * from SQL_tutorial.dbo.EmployeeDemoGraphics 
--select * from EmployeeErrors



--Using upperand lower

--Select firstname, LOWER(firstname)
--from EmployeeErrors

--Select Firstname, UPPER(FirstName)
--from EmployeeErrors



--Stored Procedures + Use Cases

--USE SQL_tutorial;

-- Check if the procedure exists and drop it if it does (optional)

--IF OBJECT_ID('test1', 'P') IS NOT NULL
--    DROP PROCEDURE test1;
--GO



--     Create the stored procedure

--create procedure test as select * from SQL_tutorial.dbo.EmployeeDemoGraphics

--exec test

--IF OBJECT_ID('temp_employee', 'P') IS NOT NULL
--    DROP PROCEDURE temp_employee;
--GO
--create procedure temp_employee
--as
--Create table #temp_employee2 (
--JobTitle varchar(100),
--EmployeesPerJob int ,
--AvgAge int,
--AvgSalary int
--)


--Insert into #temp_employee2
--SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
--FROM SQL_tutorial..EmployeeDemoGraphics emp
--JOIN SQL_tutorial..EmployeeSalary sal
--	ON emp.EmployeeID = sal.EmployeeID
--group by JobTitle


--select * from #temp_employee2;

--exec temp_employee  @JobTitle = 'Salesman'

--Select EmployeeID, Salary, (Select AVG(Salary) From EmployeeSalary) as AllAvgSalary
--From EmployeeSalary

-- How to do it with Partition By
--Select EmployeeID, Salary, AVG(Salary) over () as AllAvgSalary
--From EmployeeSalary


-- Why Group By doesn't work
--Select EmployeeID, Salary, AVG(Salary) as AllAvgSalary
--From EmployeeSalary
--Group By EmployeeID, Salary
--order by EmployeeID



-- Subquery in From

--Select a.EmployeeID, AllAvgSalary
--From 
--	(Select EmployeeID, Salary, AVG(Salary) over () as AllAvgSalary
--	 From EmployeeSalary) a
--Order by a.EmployeeID



---- Subquery in Where


--Select EmployeeID, JobTitle, Salary
--From EmployeeSalary
--where EmployeeID in (
--	Select EmployeeID 
--	From EmployeeDemographics
--	where Age > 30)
